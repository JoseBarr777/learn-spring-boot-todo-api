package com.example.tasksmanager.todo.domain;

import jakarta.persistence.*;
import java.time.LocalDate;

/**
 * A Todo represents a single task in the app.
 *
 * This class is a JPA entity, meaning it maps directly to the "todos" table
 * in the database. Each task has an id, a title, a completion status,
 * and an optional due date.
 *
 * Besides holding data, entities can also include behavior that makes sense
 * for the domain—for example, toggling a task’s completed state.
 */
@Entity // Marks this class as a JPA entity so it gets managed by Hibernate
@Table(name = "todos") // Explicitly maps this entity to the "todos" table
public class Todo {

    // Primary key, auto-generated by the db
    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // Task title, cannot be null, max 200 characters
    @Column(nullable = false, length = 200)
    private String title;

    // Whether the task is done (defaults to false)
    @Column(nullable = false)
    private boolean completed = false;

    // Optional due date
    private LocalDate dueDate;

    // JPA needs a no-args constructor to create objects when loading from the db.
    // Making it protected prevents it from being used outside the class but still allows JPA to call it.
    protected Todo() {} 

    // Main constructor for creating new todos in code
    public Todo(String title, LocalDate dueDate) {
        this.title = title;
        this.dueDate = dueDate;
    }

    // getters 
    public Long getId() {
        return id;
    }

    public String getTitle() {
        return title;
    }

    public boolean isCompleted() {
        return completed;
    }

    public LocalDate getDueDate() {
        return dueDate;
    }

    // setters
    public void setTitle(String title) {
        this.title = title;
    }

    public void setCompleted(boolean completed) {
        this.completed = completed;
    }

    public void setDueDate(LocalDate dueDate) {
        this.dueDate = dueDate;
    }

    // tiny domain behaviors (domain logic) to update the completed state
    public void toggle() {
        this.completed = !this.completed;
    }
}
